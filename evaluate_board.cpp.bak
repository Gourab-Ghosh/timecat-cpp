#include <iostream>
#include <cmath>
#include <algorithm>
#include "board.hpp"
#include "constants.hpp"
#include "utils.hpp"
#include "evaluate_board.hpp"
#include "engine_constants.hpp"
using namespace std;

BoardEvaluator::BoardEvaluator(Board &board){
    this->board = &board;
}

double BoardEvaluator::evaluate_capture(Move move){
    if (board->is_en_passant(move)){
        return mvv_lva[1][1];
    }
    return mvv_lva[board->piece_type_at(move._from_square)][board->piece_type_at(move._to_square)];
}

double BoardEvaluator::evaluate_piece_position(int piece_type, bool color, Square square){
    if (color){
        square = square_mirror(square);
    }
    double opening_score = (10 - opening_pieces_unordered_mapping_weights[piece_type]) * pieces_unordered_mapping[0][piece_type][square];
    double endgame_score = (10 - endgame_pieces_unordered_mapping_weights[piece_type]) * pieces_unordered_mapping[1][piece_type][square];
    double score = 0;
    if (_game_phase < ENDGAME_PERCENTAGE - TRANSITION_PHASE_PERCENT / 2){
        score = opening_score;
    } else if (_game_phase > ENDGAME_PERCENTAGE + TRANSITION_PHASE_PERCENT / 2){
        score = endgame_score;
    } else{
        score = (1 - _game_phase) * opening_score + _game_phase * endgame_score;
    }
    return score / 4;
}

double BoardEvaluator::evaluate_piece_at(int piece_type, bool color, Square square, unsigned long long mobility_mask){
    if (DEBUG){
        if (!(piece_type)){
            cout << "Got unexpected piece type!" << endl;
            raise_error();
        }
    }
    double material_score = (1 - _game_phase) * opening_material_weights[piece_type] + _game_phase * endgame_material_weights[piece_type];
    // return material_score;
    double threat_score = 0;
    if (piece_type != 1 && piece_type != 6){
        if (!(board->is_pinned(color, square) && board->generate_legal_moves(BB_SQUARES[square], BB_ALL).empty())){
            switch (piece_type){
                case 2:
                    material_score *= (1 + MOBILITY_ADVANTAGE_PERCENTAGE * double(popcount(mobility_mask)) / 9);
                    break;
                case 3:
                    material_score *= (1 + MOBILITY_ADVANTAGE_PERCENTAGE * double(popcount(mobility_mask)) / 15);
                    break;
                case 4:
                    material_score *= (1 + MOBILITY_ADVANTAGE_PERCENTAGE * double(popcount(mobility_mask)) / 15);
                    break;
                case 5:
                    material_score *= (1 + MOBILITY_ADVANTAGE_PERCENTAGE * double(popcount(mobility_mask)) / 29);
                    break;
            }
            threat_score += popcount(mobility_mask & board->occupied_co(!(color)));
        }
    } else if (piece_type == 1){
        if (board->is_passed_pawn(square, color)){
            material_score *= (1 + PASSED_PAWN_ADVANTAGE_PERCENTAGE);
        }
    }
    return material_score + threat_score / 20;
}

double BoardEvaluator::evaluate_king_safety(unsigned int white_king_square, unsigned int black_king_square, unsigned int white_king_rank, unsigned int black_king_rank, unsigned int white_king_file, unsigned int black_king_file, double material_score){
    double score = 0;
    if (_game_phase < ENDGAME_PERCENTAGE){
        // castling point
        const double castling_point = 5;
        if (board->has_castling_rights(true)){
            score += castling_point;
        } else if (board->_white_castling_status == 2){
            score += castling_point + 1;
        } else if (board->_white_castling_status == 1){
            score += castling_point + 2;
        }
        if (board->has_castling_rights(false)){
            score -= castling_point;
        } else if (board->_black_castling_status == 2){
            score -= castling_point + 1;
        } else if (board->_black_castling_status == 1){
            score -= castling_point + 2;
        }
        // king safety before endgame
        if (white_king_rank < 2){
            if (white_king_file < 3 || white_king_file > 4){
                score += (2 - white_king_rank) * 2;
                switch (white_king_file){
                    case 0:
                        score += 0.2;
                        break;
                    case 1:
                        score += 1;
                        break;
                    case 2:
                        score += 0.5;
                        break;
                    case 5:
                        score += 0.5;
                        break;
                    case 6:
                        score += 1;
                        break;
                    case 7:
                        score += 0.2;
                        break;
                }
                unsigned long long pawn_mask = board->_pawns & board->_white_occupied & (ADJACENT_FILE_MASKS[white_king_square] | BB_FILES[white_king_file]) & (BB_RANK_2 | BB_RANK_3);
                if (pawn_mask & BB_FILES[white_king_file]){
                    score += 2;
                }
                SquareSet squareset(pawn_mask);
                for (Square square = squareset.start(); squareset.squares_left(); squareset.next(square)){
                    score += 4.0 / square_distance(white_king_square, square);
                }
            }
        } else{
            score -= 3;
        }
        if (black_king_rank > 5){
            if (black_king_file < 3 || black_king_file > 4){
                score -= (black_king_rank - 5) * 2;
                switch (black_king_file){
                    case 0:
                        score -= 0.2;
                        break;
                    case 1:
                        score -= 1;
                        break;
                    case 2:
                        score -= 0.5;
                        break;
                    case 5:
                        score -= 0.5;
                        break;
                    case 6:
                        score -= 1;
                        break;
                    case 7:
                        score -= 0.2;
                        break;
                }
                unsigned long long pawn_mask = board->_pawns & board->_black_occupied & (ADJACENT_FILE_MASKS[black_king_square] | BB_FILES[black_king_file]) & (BB_RANK_6 | BB_RANK_7);
                if (pawn_mask & BB_FILES[black_king_file]){
                    score -= 2;
                }
                SquareSet squareset(pawn_mask);
                for (Square square = squareset.start(); squareset.squares_left(); squareset.next(square)){
                    score -= 4.0 / square_distance(black_king_square, square);
                }
            }
        } else{
            score += 3;
        }
    } else{
        // forcing king to corner
        // unsigned int white_king_center_distance = rank_file_distance_sum((4, 4), white_king_square)
        // unsigned int black_king_center_distance = rank_file_distance_sum((4, 4), (black_king_rank, black_king_file))
        // score += black_king_center_distance - white_king_center_distance
        unsigned int min_white_king_corner_distance = 9;
        unsigned int min_black_king_corner_distance = 9;
        unsigned int min_white_king_center_distance = 9;
        unsigned int min_black_king_center_distance = 9;
        for (unsigned int corner_square : {A1, H1, A8, H8}){
            unsigned int black_king_corner_distance = rank_file_distance_sum(corner_square, black_king_square);
            unsigned int white_king_corner_distance = rank_file_distance_sum(corner_square, white_king_square);
            if (min_black_king_corner_distance > black_king_corner_distance){
                min_black_king_corner_distance = black_king_corner_distance;
            }
            if (min_white_king_corner_distance > white_king_corner_distance){
                min_white_king_corner_distance = white_king_corner_distance;
            }
        }
        for (unsigned int center_square : {D1, E1, D2, E2}){
            unsigned int black_king_center_distance = rank_file_distance_sum(center_square, black_king_square);
            unsigned int white_king_center_distance = rank_file_distance_sum(center_square, white_king_square);
            if (min_black_king_center_distance > black_king_center_distance){
                min_black_king_center_distance = black_king_center_distance;
            }
            if (min_white_king_center_distance > white_king_center_distance){
                min_white_king_center_distance = white_king_center_distance;
            }
        }
        unsigned int distance_between_kings = rank_file_distance_sum(white_king_square, black_king_square);
        double forcing_checkmate_score = 0;
        // moving the king having advantage to the other king for checkmate
        if (material_score > 0){
            forcing_checkmate_score += 3 * (16 - distance_between_kings) + (16 - min_black_king_corner_distance);
        } else{
            forcing_checkmate_score -= 3 * (16 - distance_between_kings) + (16 - min_white_king_corner_distance);
        }
        score += forcing_checkmate_score / 5;

        // cout << endl;
        // cout << endl;
        // cout << "min_black_king_corner_distance: " << min_black_king_corner_distance << endl;
        // cout << "min_white_king_corner_distance: " << min_white_king_corner_distance << endl;
        // cout << "distance_between_kings: " << distance_between_kings << endl;
        // cout << "forcing_checkmate_score: " << forcing_checkmate_score << endl;
        // cout << endl;
        // cout << endl;
    }
    return score / 10;
}

double BoardEvaluator::evaluate_rook_position(int white_king_square, int black_king_square, int white_king_rank, int black_king_rank, int white_king_file, int black_king_file){
    double point = 0;
    vector<unsigned int> white_rook_squares = SquareSet(board->_rooks & board->_white_occupied).get_vector();
    int num_white_rooks_in_open_file = 0;
    for (Square square : white_rook_squares){
        if (square_rank(square) == 0){
            unsigned long long pawns = board->_pawns & BB_FILES[square_file(square)] & board->_white_occupied;
            int num_pawns = popcount(pawns);
            if (!(num_pawns)){
                num_white_rooks_in_open_file++;
            }
            point -= double(num_pawns);
        }
    }
    if (white_rook_squares.size() == 2){
        if (num_white_rooks_in_open_file == 2){
            if (square_file(white_rook_squares[0]) == square_file(white_rook_squares[1])){
                point += 1;
            }
        }
    }
    vector<unsigned int> black_rook_squares = SquareSet(board->_rooks & board->_black_occupied).get_vector();
    int num_black_rooks_in_open_file = 0;
    for (Square square : black_rook_squares){
        if (square_rank(square) == 0){
            unsigned long long pawns = board->_pawns & BB_FILES[square_file(square)] & board->_black_occupied;
            int num_pawns = popcount(pawns);
            if (!(num_pawns)){
                num_black_rooks_in_open_file++;
            }
            point += double(num_pawns);
        }
    }
    if (black_rook_squares.size() == 2){
        if (num_black_rooks_in_open_file == 2){
            if (square_file(black_rook_squares[0]) == square_file(black_rook_squares[1])){
                point -= 1;
            }
        }
    }
    return point;
}

double BoardEvaluator::evaluate_pawn_structures(){
    double point = 0;
    unsigned long long white_occupied = board->_white_occupied;
    unsigned long long black_occupied = board->_black_occupied;
    unsigned long long all_pawns = board->_pawns;
    unsigned long long white_pawns = all_pawns & white_occupied;
    unsigned long long black_pawns = all_pawns & black_occupied;
    // double pawn
    for (unsigned int i = 0; i < 7; i++){
        unsigned long long file_mask = BB_FILES[i];
        unsigned long long white_pawns_in_current_file = white_pawns & file_mask;
        unsigned long long black_pawns_in_current_file = black_pawns & file_mask;
        double score = 0;
        if (white_pawns_in_current_file){
            score += double(popcount(white_pawns_in_current_file)) - 1;
        }
        if (black_pawns_in_current_file){
            score -= double(popcount(black_pawns_in_current_file)) - 1;
        }
        point -= 5*score;
    }
    // isolated pawn
    SquareSet black_pawns_isolated_pawn_squareset(black_pawns);
    for (Square square = black_pawns_isolated_pawn_squareset.start(); black_pawns_isolated_pawn_squareset.squares_left(); black_pawns_isolated_pawn_squareset.next(square)){ // BLACK
        if (!(ADJACENT_FILE_MASKS[square] & black_pawns)){
            point += 2;
        }
    }
    SquareSet white_pawns_isolated_pawn_squareset(white_pawns);
    for (Square square = white_pawns_isolated_pawn_squareset.start(); white_pawns_isolated_pawn_squareset.squares_left(); white_pawns_isolated_pawn_squareset.next(square)){ // WHITE
        if (!(ADJACENT_FILE_MASKS[square] & white_pawns)){
            point -= 2;
        }
    }
    // passed pawn
    SquareSet black_pawns_passed_pawn_squareset(black_pawns);
    for (Square square = black_pawns_passed_pawn_squareset.start(); black_pawns_passed_pawn_squareset.squares_left(); black_pawns_passed_pawn_squareset.next(square)){ // BLACK
        if (board->is_passed_pawn(square, false)){
            double pawn_promotion_distance = square_rank(square);
            point -= pow(10 - pawn_promotion_distance, 2) / 5;
        }
    }
    SquareSet white_pawns_passed_pawn_squareset(white_pawns);
    for (Square square = white_pawns_passed_pawn_squareset.start(); white_pawns_passed_pawn_squareset.squares_left(); white_pawns_passed_pawn_squareset.next(square)){ // WHITE
        if (board->is_passed_pawn(square, true)){
            double pawn_promotion_distance = 7 - square_rank(square);
            point += pow(10 - pawn_promotion_distance, 2) / 5;
        }
    }
    return point/10;
}

Score BoardEvaluator::evaluate_board(bool reverse_score, bool print_scores_seperately){
    // material advantage and piece position and development and center control and threat and mobility
    double material_score = 0;
    double center_control_point = 0;
    double positional_point = 0;
    int white_king_square = board->find_king_square(true);
    int black_king_square = board->find_king_square(false);
    if (DEBUG){
        if ((white_king_square == NO_SQUARE) || (black_king_square == NO_SQUARE)){
            Move move;
            cout << "King capture not possible" << endl;
            raise_error();
        }
    }
    int white_king_rank = square_rank(white_king_square);
    int black_king_rank = square_rank(black_king_square);
    int white_king_file = square_file(white_king_square);
    int black_king_file = square_file(black_king_square);
    unsigned long long white_king_surrounding_mask = get_surrounding_mask(white_king_square);
    unsigned long long black_king_surrounding_mask = get_surrounding_mask(black_king_square);
    // unsigned long long center_control_mask = CENTER_SQUARES_BB | PSEUDO_CENTER_SQUARES_BB;

    const unsigned long long masks_array[7] = {0, board->_pawns, board->_knights, board->_bishops, board->_rooks, board->_queens, board->_kings};
    unsigned long long white_occupied_mask = board->_white_occupied;
    unsigned long long black_occupied_mask = board->_black_occupied;
    double king_attack_score = 0;
    for (unsigned int piece_type = 1; piece_type < 7; piece_type++){
        SquareSet white_pieces_squareset(masks_array[piece_type] & white_occupied_mask);
        for (Square square = white_pieces_squareset.start(); white_pieces_squareset.squares_left(); white_pieces_squareset.next(square)){
            unsigned long long mobility_mask = board->_attacks_mask(square, board->_pawns) | BB_SQUARES[square];
            material_score += evaluate_piece_at(piece_type, true, square, mobility_mask);
            if (piece_type != 6){
                center_control_point += (double(popcount(mobility_mask & CENTER_SQUARES_BB)) + double(popcount(mobility_mask & PSEUDO_CENTER_SQUARES_BB)) / 3) * (10 - material_weights[piece_type]);
                king_attack_score += double(popcount(black_king_surrounding_mask & board->_attacks_mask(square, BB_EMPTY))) - double(popcount(between(black_king_square, square) & board->_pawns));
            }
            positional_point += evaluate_piece_position(piece_type, true, square) * piece_unordered_mapping_weights[piece_type];
        }
        SquareSet black_pieces_squareset(masks_array[piece_type] & black_occupied_mask);
        for (Square square = black_pieces_squareset.start(); black_pieces_squareset.squares_left(); black_pieces_squareset.next(square)){
            unsigned long long mobility_mask = board->_attacks_mask(square, board->_pawns) | BB_SQUARES[square];
            material_score -= evaluate_piece_at(piece_type, false, square, mobility_mask);
            if (piece_type != 6){
                center_control_point -= (double(popcount(mobility_mask & CENTER_SQUARES_BB)) + double(popcount(mobility_mask & PSEUDO_CENTER_SQUARES_BB)) / 3) * (10 - material_weights[piece_type]);
                king_attack_score -= double(popcount(white_king_surrounding_mask & board->_attacks_mask(square, BB_EMPTY))) - double(popcount(between(white_king_square, square) & board->_pawns));
            }
            positional_point -= evaluate_piece_position(piece_type, false, square) * piece_unordered_mapping_weights[piece_type];
        }
    }
    center_control_point = (1 - _game_phase) * center_control_point / 12;
    positional_point /= 100;
    king_attack_score /= 32;

    // insufficient material
    double insufficient_material_score = 0;
    if (_game_phase > ENDGAME_PERCENTAGE){
        if (board->has_insufficient_material(true)){
            insufficient_material_score -= 1;
        }
        if (board->has_insufficient_material(false)){
            insufficient_material_score += 1;
        }
    }

    // knight outpost
    double knight_outpost_point = 0;
    SquareSet white_knignts_squareset(board->_knights & board->_white_occupied);
    for (Square square = white_knignts_squareset.start(); white_knignts_squareset.squares_left(); white_knignts_squareset.next(square)){
        if (!(PASSED_PAWN_MASKS[1][square] & ~BB_FILES[square_file(square)] & board->_pawns & board->_black_occupied)){
            knight_outpost_point += 1;
        }
    }
    SquareSet black_knignts_squareset(board->_knights & board->_black_occupied);
    for (Square square = black_knignts_squareset.start(); black_knignts_squareset.squares_left(); black_knignts_squareset.next(square)){
        if (!(PASSED_PAWN_MASKS[0][square] & ~BB_FILES[square_file(square)] & board->_pawns & board->_white_occupied)){
            knight_outpost_point -= 1;
        }
    }

    // bishop pair advantage
    double bishop_pair_advantage_point = 0;
    if (popcount(board->_bishops & board->_white_occupied) == 2){
        bishop_pair_advantage_point += 1;
    }
    if (popcount(board->_bishops & board->_black_occupied) == 2){
        bishop_pair_advantage_point -= 1;
    }

    // king safety
    double king_safety_score = evaluate_king_safety(white_king_square, black_king_square, white_king_rank, black_king_rank, white_king_file, black_king_file, material_score) + king_attack_score / 5;
    // double rooks_evaluation_point = evaluate_rook_position(white_king_square, black_king_square, white_king_rank, black_king_rank, white_king_file, black_king_file);
    double rooks_evaluation_point = 0;
    double pawn_structure_point = evaluate_pawn_structures();

    // endgame pawn push
    double endgame_pawn_push_point = 0;
    SquareSet black_pawns_squareset(board->_pawns & board->_black_occupied);
    for (Square square = black_pawns_squareset.start(); black_pawns_squareset.squares_left(); black_pawns_squareset.next(square)){ // BLACK
        double pawn_promotion_distance = square_rank(square);
        endgame_pawn_push_point -= pow(10 - pawn_promotion_distance, 2) / 10;
    }
    SquareSet white_pawns_squareset(board->_pawns & board->_white_occupied);
    for (Square square = white_pawns_squareset.start(); white_pawns_squareset.squares_left(); white_pawns_squareset.next(square)){ // WHITE
        double pawn_promotion_distance = 7 - square_rank(square);
        endgame_pawn_push_point += pow(10 - pawn_promotion_distance, 2) / 10;
    }
    endgame_pawn_push_point *= _game_phase / 20;

    double material_score_weight = 10000;
    // double material_score_weight = 5000;
    double score = material_score_weight * (material_score + king_safety_score + endgame_pawn_push_point + 5 * insufficient_material_score) + 100 * center_control_point + 200 * positional_point + 50 * pawn_structure_point + 5 * rooks_evaluation_point + 10 * knight_outpost_point + 10 * bishop_pair_advantage_point;
    // double score = material_score_weight * (material_score + king_safety_score / 3 + endgame_pawn_push_point / 3) + 700 * center_control_point + 500 * positional_point + (-CHECKMATE_POINT) * insufficient_material_score + 100 * pawn_structure_point + 50 * rooks_evaluation_point + 20 * knight_outpost_point + 20 * bishop_pair_advantage_point;

    if (print_scores_seperately){
        cout << "material_score: " << material_score << endl;
        cout << "king_safety_score: " << king_safety_score << endl;
        cout << "center_control_point: " << center_control_point << endl;
        cout << "positional_point: " << positional_point << endl;
        cout << "insufficient_material_score: " << insufficient_material_score << endl;
        cout << "pawn_structure_point: " << pawn_structure_point << endl;
        cout << "rooks_evaluation_point: " << rooks_evaluation_point << endl;
        cout << "knight_outpost_point: " << knight_outpost_point << endl;
        cout << "bishop_pair_advantage_point: " << bishop_pair_advantage_point << endl;
        cout << "endgame_pawn_push_point: " << endgame_pawn_push_point << endl;
        cout << "king_attack_score: " << king_attack_score << endl;
    }

    if (!(board->_turn)){
        if (reverse_score){
            score = -score;
        }
    }
    material_score_weight /= 100;
    score /= material_score_weight;
    return Score(score);
}

double BoardEvaluator::get_game_phase(){
    const double weights[2] = {5, 2};
    unsigned long long masks_array[7] = {0, board->_pawns, board->_knights, board->_bishops, board->_rooks, board->_queens, board->_kings};
    const int initial_num_pieces_of_piece_type[7] = {0, 16, 4, 4, 4, 2, 2};
    double initial_material_sum = 0;
    double current_material_sum = 0;
    for (unsigned int piece_type = 1; piece_type < 6; piece_type++){
        double material_weight = material_weights[piece_type];
        initial_material_sum += initial_num_pieces_of_piece_type[piece_type] * material_weight;
        current_material_sum += double(popcount(masks_array[piece_type])) * material_weight;
    }
    double backrank_occupied;
    double divide_factor;
    if (current_material_sum / initial_material_sum > 0.5){
        backrank_occupied = 16 - double(popcount(board->_occupied & (BB_RANK_1 | BB_RANK_8)));
        divide_factor = initial_material_sum * weights[0] + 16 * weights[1];
    } else{
        backrank_occupied = 0;
        divide_factor = initial_material_sum * weights[0];
    }
    double position = (initial_material_sum - current_material_sum) * weights[0] + backrank_occupied * weights[1];
    return position / divide_factor;
}